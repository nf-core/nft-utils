{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"nft-utils","text":"<p>nft-utils is an nf-test plugin to provide additional functions and assertions that fall outside of the typical nf-test features. They were primarily developed by the nf-core community but should be applicable to any nf-tests.</p>"},{"location":"#start-using-the-plugin","title":"Start using the plugin","text":"<p>To start using the plugin please add it to your <code>nf-test.config</code> file:</p> nf-test.config<pre><code>config {\n    plugins {\n        load \"nft-utils@0.0.4\"\n    }\n}\n</code></pre> <p>Have a look at the usage documentation for more information on how to start working with the plugin.</p>"},{"location":"#use-a-development-version","title":"Use a development version","text":"<p>To use the development version, please do the following steps:</p> <ul> <li>Clone the nft-utils repository</li> </ul> HTTPSSSH <pre><code>git clone git@github.com:nf-core/nft-utils.git\n</code></pre> <pre><code>git clone https://github.com/nf-core/nft-utils.git\n</code></pre> <ul> <li>Run the build script</li> </ul> <pre><code>./build.sh\n</code></pre> <ul> <li>Add the jar location (visible at the end of the build script output) to the <code>nf-test.config</code> file</li> </ul> nf-test.config<pre><code>config {\n    plugins {\n        loadFromFile \"full/path/to/the/plugin/jar\"\n    }\n}\n</code></pre>"},{"location":"usage/","title":"Functions usage","text":""},{"location":"usage/#snapshot-functions","title":"Snapshot functions","text":"<p>The plugin adds the following functions to assist with managing pipeline-level nf-test snapshots:</p>"},{"location":"usage/#removenextflowversion","title":"<code>removeNextflowVersion()</code>","text":"<p>nf-core pipelines create a yml file listing all the versions of the software used in the pipeline.</p> <p>Here is an example of this file coming from the rnaseq pipeline.</p> <pre><code>UNTAR:\n  untar: 1.34\nWorkflow:\n  nf-core/rnaseq: v3.16.0dev\n  Nextflow: 24.04.4\n</code></pre> <p>This function remove the Nextflow version from this yml file, as it is not relevant for the snapshot. Therefore for the purpose of the snapshot, it would consider this to be the contents of the YAML file:</p> <pre><code>UNTAR:\n  untar: 1.34\nWorkflow:\n  nf-core/rnaseq: v3.16.0dev\n</code></pre> <p>Usage:</p> <pre><code>assert snapshot(removeNextflowVersion(\"$outputDir/pipeline_info/nf_core_rnaseq_software_mqc_versions.yml\")).match()\n</code></pre> <p>The function also supports wildcard patterns in file paths, which is useful when the exact filename may vary:</p> <pre><code>assert snapshot(removeNextflowVersion(\"$outputDir/pipeline_info/*_versions.yml\")).match()\n</code></pre> <p>The only argument is the path to the file (or wildcard pattern) which must match a versions file in YAML format as per the nf-core standard. When using wildcards, all matching files will be processed and their results merged together.</p> <p>Note: The returned YAML structure will have all keys sorted alphabetically at both the top level and within nested sections for consistent, predictable output.</p>"},{"location":"usage/#removefromyamlmap","title":"<code>removeFromYamlMap()</code>","text":"<p>Remove any key or entire section from a YAML file. This function supports two usage patterns and also supports wildcard patterns in file paths.</p>"},{"location":"usage/#remove-a-specific-subkey-3-arguments","title":"Remove a specific subkey (3 arguments)","text":"<p>Remove a specific subkey from within a section:</p> <pre><code>removeFromYamlMap(\"file.yml\", \"Workflow\", \"Nextflow\")\n</code></pre> <p>Example input: <pre><code>UNTAR:\n  untar: 1.34\nWorkflow:\n  nf-core/rnaseq: v3.16.0dev\n  Nextflow: 24.04.4\n</code></pre></p> <p>Result: Only the \"Nextflow\" subkey is removed from \"Workflow\" <pre><code>UNTAR:\n  untar: 1.34\nWorkflow:\n  nf-core/rnaseq: v3.16.0dev\n</code></pre></p>"},{"location":"usage/#remove-an-entire-section-2-arguments","title":"Remove an entire section (2 arguments)","text":"<p>Remove an entire top-level section:</p> <pre><code>removeFromYamlMap(\"file.yml\", \"Workflow\")\n</code></pre> <p>Example input: <pre><code>UNTAR:\n  untar: 1.34\nWorkflow:\n  nf-core/rnaseq: v3.16.0dev\n  Nextflow: 24.04.4\nWorkflow2:\n  some: value\n</code></pre></p> <p>Result: The entire \"Workflow\" section is removed <pre><code>UNTAR:\n  untar: 1.34\nWorkflow2:\n  some: value\n</code></pre></p>"},{"location":"usage/#wildcard-support","title":"Wildcard support","text":"<p>Both usage patterns support wildcard patterns in the file path:</p> <pre><code>// Remove specific subkey with wildcard\nremoveFromYamlMap(\"$outputDir/pipeline_info/*_versions.yml\", \"Workflow\", \"Nextflow\")\n\n// Remove entire section with wildcard\nremoveFromYamlMap(\"$outputDir/pipeline_info/*_versions.yml\", \"Workflow\")\n</code></pre>"},{"location":"usage/#usage-in-tests","title":"Usage in tests","text":"<pre><code>// Remove specific subkey\nassert snapshot(removeFromYamlMap(\"$outputDir/pipeline_info/nf_core_pipeline_software_mqc_versions.yml\", \"Workflow\", \"Nextflow\")).match()\n\n// Remove entire section\nassert snapshot(removeFromYamlMap(\"$outputDir/pipeline_info/nf_core_pipeline_software_mqc_versions.yml\", \"Workflow2\")).match()\n\n// Using wildcards\nassert snapshot(removeFromYamlMap(\"$outputDir/pipeline_info/*_versions.yml\", \"Workflow\", \"Nextflow\")).match()\n</code></pre> <p>Arguments: - First argument: Path to the YAML file (supports wildcard patterns like <code>*</code> and <code>?</code>) - Second argument: The top-level key (section name) - Third argument (optional): The subkey to remove. If omitted, the entire section is removed.</p> <p>Notes: - When using wildcard patterns, all matching files will be processed and their results merged together. - The returned YAML structure will have all keys sorted alphabetically at both the top level and within nested sections for consistent, predictable output.</p>"},{"location":"usage/#getallfilesfromdir","title":"<code>getAllFilesFromDir()</code>","text":"<p>This function generates a list of all the contents within a directory (and subdirectories), additionally allowing for the inclusion or exclusion of specific files using glob patterns.</p> <ul> <li>The first argument is the directory path to screen for file paths (e.g. a  pipeline's <code>outdir</code> ).</li> <li>The second argument is a boolean indicating whether to include subdirectory names in the list.</li> <li>The third argument is a list of glob patterns to exclude.</li> <li>The fourth argument is a file containing additional glob patterns to exclude.</li> <li>The fifth argument is a list of glob patterns to include.</li> <li>The sixth argument is a boolean indicating whether to output relative paths.</li> </ul> <p>In this example, below are the files produced by a pipeline:</p> <pre><code>results/\n\u251c\u2500\u2500 pipeline_info\n\u2502   \u2514\u2500\u2500 execution_trace_2024-09-30_13-10-16.txt\n\u2514\u2500\u2500 stable\n    \u251c\u2500\u2500 stable_content.txt\n    \u2514\u2500\u2500 stable_name.txt\n\n2 directories, 3 files\n</code></pre> <p>One file has stable content and a stable name (<code>stable_content.txt</code>), and one file has unstable contents but a stable name (<code>stable_name.txt</code>). The last file (<code>execution_trace_2024-09-30_13-10-16.txt</code>) has no stable content nor a stable name, as its name is based on the date and time of the pipeline execution.</p> <p>We aim to snapshot files with stable content, and stable names (for both files and directories), but excluding the completely unstable file.</p> <p>First, we will specify the following two variables that we will pass to the nf-test snapshot function:</p> <ul> <li>The <code>stable_name</code> variable contains a list of all files and directories, excluding those matching the glob pattern <code>pipeline_info/execution_*.{html,txt}</code> (i.e., the unstable file).</li> <li>The <code>stable_content</code> variable contains a list of all files, excluding those that match the two glob patterns: <code>pipeline_info/execution_*.{html,txt}</code> and <code>**/stable_name.txt</code>.</li> <li>The latter is specified in the <code>tests/getAllFilesFromDir/.nftignore</code> file.</li> </ul> <pre><code>def stable_name    = getAllFilesFromDir(params.outdir, true, ['pipeline_info/execution_*.{html,txt}'], null, ['*', '**/*'])\ndef stable_content = getAllFilesFromDir(params.outdir, false, ['pipeline_info/execution_*.{html,txt}'], 'tests/getAllFilesFromDir/.nftignore', ['*', '**/*'])\n</code></pre> <p>Secondly, we need to supply these two variables to the nf-test snapshot assrtion. The list of files in <code>stable_content</code> can be supplied to the snapshot directly, and nf-test will include the md5sum hash of the file contents. For the list of stable file names with unstable contents, we can use <code>stable_name*.name</code>, to just extract just name of every file in the list for comparison (i.e., without generating the md5sum hash).</p> <pre><code>def stable_name    = getAllFilesFromDir(params.outdir, true, ['pipeline_info/execution_*.{html,txt}'], null, ['*', '**/*'])\ndef stable_content = getAllFilesFromDir(params.outdir, false, ['pipeline_info/execution_*.{html,txt}'], 'tests/getAllFilesFromDir/.nftignore', ['*', '**/*'])\nassert snapshot(\n  stable_content,\n  stable_name*.name,\n).match()\n</code></pre> <p><code>getAllFilesFromDir()</code> also supports named parameters:</p> <pre><code>def stable_name       = getAllFilesFromDir(params.outdir, ignore: ['pipeline_info/execution_*.{html,txt}'])\ndef stable_name_again = getAllFilesFromDir(params.outdir, include: ['stable/*'])\ndef stable_content    = getAllFilesFromDir(params.outdir, includeDir: false, ignore: ['pipeline_info/execution_*.{html,txt}'], ignoreFile: 'tests/getAllFilesFromDir/.nftignore')\n</code></pre> <p></p>"},{"location":"usage/#getrelativepath","title":"<code>getRelativePath()</code>","text":"<p>This function is used to get the relative path from a list of files compared to a given directory.</p> <pre><code>results/\n\u251c\u2500\u2500 pipeline_info\n\u2502   \u2514\u2500\u2500 execution_trace_2024-09-30_13-10-16.txt\n\u2514\u2500\u2500 stable\n    \u251c\u2500\u2500 stable_content.txt\n    \u2514\u2500\u2500 stable_name.txt\n\n2 directories, 3 files\n</code></pre> <p>Following the previous example, we want to get the relative path of the stable paths in the <code>results</code> directory.</p> <pre><code>def stable_name    = getAllFilesFromDir(params.outdir, true, ['pipeline_info/execution_*.{html,txt}'], null )\n</code></pre> <p>The <code>stable_name</code> variable contains the list of stable files and folders in the <code>results</code> directory.</p> <pre><code>assert snapshot(\n  getRelativePath(stable_name, outputDir)\n).match()\n</code></pre> <p>By using <code>getRelativePath()</code> we generate in the snapshot:</p> <pre><code>\"content\": [\n    [\n        \"pipeline_info\",\n        \"stable\",\n        \"stable/stable_content.txt\",\n        \"stable/stable_name.txt\"\n    ]\n]\n</code></pre> <p>A reduced list can be generated by using <code>getAllFilesFromDir()</code> without including the folders in the output.</p> <pre><code>\"content\": [\n    [\n        \"stable/stable_content.txt\",\n        \"stable/stable_name.txt\"\n    ]\n]\n</code></pre> <p>Without using <code>getRelativePath()</code> and by using <code>*.name</code> to capture the file names, only a flat structure would be generated, as shown below:</p> <pre><code>\"content\": [\n    [\n        \"pipeline_info\",\n        \"stable\",\n        \"stable_content.txt\",\n        \"stable_name.txt\"\n    ]\n]\n</code></pre> <p><code>getAllFilesFromDir()</code> named parameters <code>relative</code> can also be used to combine the two functions:</p> <pre><code>def stable_name       = getAllFilesFromDir(params.outdir, relative: true, ignore: ['pipeline_info/execution_*.{html,txt}'] )\ndef stable_name_again = getAllFilesFromDir(params.outdir, relative: true, include: ['stable/*'] )\n</code></pre>"},{"location":"usage/#listtomd5","title":"<code>listToMD5()</code>","text":"<p>This function takes a list of values as input and converts the sequence to a MD5 hash. All values in the list should be of a type that can be converted to a string, otherwise the function will fail.</p> <p>A common use case for this function could be to read a file, remove all unstable lines from it and regerenate an MD5 hash.</p>"},{"location":"usage/#dependency-management","title":"Dependency management","text":"<p>The plugin also adds the following functions to manage dependences of tests on nf-core components, in situations where they may not otherwise be available (for example, writing tests for cross-organisational subworkflows in non-nf-core repositories).</p>"},{"location":"usage/#nfcoreinitialise-set-up-a-temporary-nf-core-library","title":"<code>nfcoreInitialise()</code> - set up a temporary nf-core library","text":"<p>In a setup block, use the <code>nfcoreInitialise()</code> function to initialise a temporary nf-core library to install modules into. This function takes the path to the location to set up the library as an argument. It is recommended to use a location inside <code>launchDir</code> as this will initialise a test-specific library.</p> <pre><code>setup {\n    nfcoreInitialise(\"${launchDir}/library\")\n}\n</code></pre>"},{"location":"usage/#nfcoreinstall-install-modules-to-a-temporary-library","title":"<code>nfcoreInstall()</code> - Install modules to a temporary library","text":"<p>Use the <code>nfcoreInstall()</code> function to install nf-core modules in a temporary library. This function takes the path to the library and either a list of strings, each with an nf-core module name in <code>tool/subtool</code> format, or a list of maps, with the keys <code>name</code>, <code>sha</code>, and <code>remote</code> (both <code>sha</code> and <code>remote</code> are optional).</p> <pre><code>setup {\n    nfcoreInitialise(\"${launchDir}/library\")\n    nfcoreInstall(\"${launchDir}/library\", [\"minimap2/index\"])\n    nfcoreInstall(\n      \"${launchDir}/library\",\n        [\n          [\n            name: \"minimap2/align\",\n            sha: \"5850432aab24a1924389b660adfee3809d3e60a9\"\n          ],\n          [\n            name: \"fastqc\",\n            remote: \"https://github.com/nf-core-test/modules.git\"\n          ],\n          [\n            name: \"prokka\",\n            sha: \"9627f4367b11527194ef14473019d0e1a181b741\"\n            remote: \"https://github.com/nf-core-test/modules.git\"\n          ],\n        ]\n    )\n}\n</code></pre>"},{"location":"usage/#nfcorelink-link-a-temporary-library-to-your-modules-directory","title":"<code>nfcoreLink()</code> - Link a temporary library to your modules directory","text":"<p>Use the <code>nfcoreLink()</code> function to link a library to your module library. This function takes two arguments, the path to a temporary library, and the location where the modules in the library should be temporarily linked (e.g. <code>${baseDir}/modules/nf-core</code>):</p> <pre><code>setup {\n    nfcoreInitialise(\"${launchDir}/library\")\n    nfcoreInstall(\"${launchDir}/library\", [\"minimap2/index\", \"minimap2/align\"])\n    nfcoreLink(\"${launchDir}/library\", \"${baseDir}/modules/\")\n}\n</code></pre> <p>This creates a symlink to the modules directory of your temporary library at <code>${baseDir}/modules/nf-core</code>. Using this location, you can refer to the nf-core modules as if they were installed as normal in your tests.</p>"},{"location":"usage/#nfcoreunlink-unlink-a-temporary-library-from-your-modules-directory","title":"<code>nfcoreUnlink()</code> - Unlink a temporary library from your modules directory","text":"<p>To unlink a temporary library after the test has completed, use the <code>nfcoreUnlink()</code> function. It takes the same arguments as <code>nfcoreLink()</code>, and recursively removes all symlinks pointing to the temporary library.</p> <pre><code>setup {\n    nfcoreInitialise(\"${launchDir}/library\")\n    nfcoreInstall(\"${launchDir}/library\", [\"minimap2/index\", \"minimap2/align\"])\n    nfcoreLink(\"${launchDir}/library\", \"${baseDir}/modules/\")\n\n    run(\"MINIMAP2_INDEX\") {\n        script \"${baseDir}/modules/nf-core/minimap2/index/main.nf\n        ...\n    }\n}\n\nwhen {\n    ...\n}\n\nthen {\n    ...\n}\n\ncleanup {\n  nfcoreUnlink(\"${launchDir}/library\", \"${baseDir}/modules/\")\n}\n</code></pre>"},{"location":"usage/#nfcoredeletelibrary-completely-delete-a-temporary-library","title":"<code>nfcoreDeleteLibrary()</code> - Completely delete a temporary library","text":"<p>You can use the <code>nfcoreDeleteLibrary()</code> function to completely remove the temporary library, if desired.</p> <pre><code>setup {\n    nfcoreInitialise(\"${launchDir}/library\")\n    nfcoreInstall(\"${launchDir}/library\", [\"minimap2/index\", \"minimap2/align\"])\n    nfcoreLink(\"${launchDir}/library\", \"${baseDir}/modules/\")\n\n    run(\"MINIMAP2_INDEX\") {\n        script \"${baseDir}/modules/nf-core/minimap2/index/main.nf\n        ...\n    }\n}\n\nwhen {\n    ...\n}\n\nthen {\n    ...\n}\n\ncleanup {\n    nfcoreDeleteLibrary(\"${launchDir}/library\")\n}\n</code></pre>"}]}